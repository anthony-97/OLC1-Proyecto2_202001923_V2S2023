
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Structures.Node;
import Structures.Arbol;
import Structures.Production;
import Structures.Instructions.Operacion;
import Structures.Instructions.Instruccion;
import Utils.Analizador;
import Structures.Instructions.IngresoVariable;
import Structures.Instructions.Asignacion;
import Structures.Instructions.Metodo;
import Structures.Instructions.Imprimir;
import Structures.Instructions.Si;
import Structures.Instructions.Mientras;
import Structures.Instructions.HacerMientras;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\006\000\002\004\011\000\002\004\006\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\015\000\002\004\016\000\002\004\012\000\002\004\011" +
    "\000\002\004\013\000\002\004\005\000\002\004\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\004\000\002" +
    "\006\013\000\002\006\012\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\024\003\012\004\011\042\015\051\004\052" +
    "\006\055\014\056\013\057\005\065\016\001\002\000\004" +
    "\012\210\001\002\000\004\065\204\001\002\000\004\016" +
    "\174\001\002\000\024\002\000\004\011\042\015\051\004" +
    "\052\006\055\014\056\013\057\005\065\016\001\002\000" +
    "\026\002\ufffe\004\ufffe\017\ufffe\042\ufffe\051\ufffe\052\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\065\ufffe\001\002\000\004\065" +
    "\160\001\002\000\004\006\156\001\002\000\004\012\152" +
    "\001\002\000\004\065\144\001\002\000\004\012\106\001" +
    "\002\000\012\005\022\012\023\040\024\041\021\001\002" +
    "\000\004\002\020\001\002\000\004\002\001\001\002\000" +
    "\004\006\105\001\002\000\024\012\036\022\032\037\037" +
    "\060\030\061\040\062\034\063\031\064\033\065\041\001" +
    "\002\000\004\013\026\001\002\000\004\006\025\001\002" +
    "\000\026\002\uffed\004\uffed\017\uffed\042\uffed\051\uffed\052" +
    "\uffed\055\uffed\056\uffed\057\uffed\065\uffed\001\002\000\004" +
    "\006\027\001\002\000\026\002\ufff6\004\ufff6\017\ufff6\042" +
    "\ufff6\051\ufff6\052\ufff6\055\ufff6\056\ufff6\057\ufff6\065\ufff6" +
    "\001\002\000\042\006\uffd2\013\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\042\006\uffd3\013\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\001\002\000\024\012\036" +
    "\022\032\037\037\060\030\061\040\062\034\063\031\064" +
    "\033\065\041\001\002\000\042\006\uffd0\013\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\001\002\000\042\006\uffd4\013\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\001\002\000" +
    "\040\006\103\021\056\022\046\023\052\024\055\025\047" +
    "\026\060\027\053\030\061\031\054\032\051\033\057\034" +
    "\050\035\062\036\045\001\002\000\024\012\036\022\032" +
    "\037\037\060\030\061\040\062\034\063\031\064\033\065" +
    "\041\001\002\000\024\012\036\022\032\037\037\060\030" +
    "\061\040\062\034\063\031\064\033\065\041\001\002\000" +
    "\042\006\uffd1\013\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\001\002\000\046\006\uffcf" +
    "\013\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\040\043\041\042\001\002\000\042\006" +
    "\uffd5\013\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\001\002\000\042\006\uffd6\013\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\001\002\000\042\006\uffd7\013\uffd7\021\056\022" +
    "\046\023\052\024\055\025\047\026\060\027\053\030\061" +
    "\031\054\032\051\033\057\034\050\035\uffd7\036\uffd7\001" +
    "\002\000\024\012\036\022\032\037\037\060\030\061\040" +
    "\062\034\063\031\064\033\065\041\001\002\000\024\012" +
    "\036\022\032\037\037\060\030\061\040\062\034\063\031" +
    "\064\033\065\041\001\002\000\024\012\036\022\032\037" +
    "\037\060\030\061\040\062\034\063\031\064\033\065\041" +
    "\001\002\000\024\012\036\022\032\037\037\060\030\061" +
    "\040\062\034\063\031\064\033\065\041\001\002\000\024" +
    "\012\036\022\032\037\037\060\030\061\040\062\034\063" +
    "\031\064\033\065\041\001\002\000\024\012\036\022\032" +
    "\037\037\060\030\061\040\062\034\063\031\064\033\065" +
    "\041\001\002\000\024\012\036\022\032\037\037\060\030" +
    "\061\040\062\034\063\031\064\033\065\041\001\002\000" +
    "\024\012\036\022\032\037\037\060\030\061\040\062\034" +
    "\063\031\064\033\065\041\001\002\000\024\012\036\022" +
    "\032\037\037\060\030\061\040\062\034\063\031\064\033" +
    "\065\041\001\002\000\024\012\036\022\032\037\037\060" +
    "\030\061\040\062\034\063\031\064\033\065\041\001\002" +
    "\000\024\012\036\022\032\037\037\060\030\061\040\062" +
    "\034\063\031\064\033\065\041\001\002\000\024\012\036" +
    "\022\032\037\037\060\030\061\040\062\034\063\031\064" +
    "\033\065\041\001\002\000\024\012\036\022\032\037\037" +
    "\060\030\061\040\062\034\063\031\064\033\065\041\001" +
    "\002\000\024\012\036\022\032\037\037\060\030\061\040" +
    "\062\034\063\031\064\033\065\041\001\002\000\042\006" +
    "\uffd9\013\uffd9\021\056\022\046\023\052\024\055\025\047" +
    "\026\060\027\053\030\061\031\054\032\051\033\057\034" +
    "\050\035\uffd9\036\045\001\002\000\042\006\uffdf\013\uffdf" +
    "\021\056\022\046\023\052\024\055\025\047\026\060\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\001\002\000\042\006\uffe0\013\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\047\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\001" +
    "\002\000\042\006\uffda\013\uffda\021\056\022\046\023\052" +
    "\024\055\025\047\026\060\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\001\002\000\042" +
    "\006\uffe5\013\uffe5\021\uffe5\022\uffe5\023\052\024\055\025" +
    "\047\026\060\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\001\002\000\042\006\uffe2\013" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\047\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\042\006\uffdd\013\uffdd\021\056" +
    "\022\046\023\052\024\055\025\047\026\060\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\001\002\000\042\006\uffde\013\uffde\021\056\022\046\023" +
    "\052\024\055\025\047\026\060\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\001\002\000" +
    "\042\006\uffe3\013\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\047\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\042\006\uffdc" +
    "\013\uffdc\021\056\022\046\023\052\024\055\025\047\026" +
    "\060\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\001\002\000\042\006\uffdb\013\uffdb\021" +
    "\056\022\046\023\052\024\055\025\047\026\060\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\001\002\000\042\006\uffe1\013\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002" +
    "\000\042\006\uffe4\013\uffe4\021\uffe4\022\uffe4\023\052\024" +
    "\055\025\047\026\060\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000\042\006" +
    "\uffd8\013\uffd8\021\056\022\046\023\052\024\055\025\047" +
    "\026\060\027\053\030\061\031\054\032\051\033\057\034" +
    "\050\035\uffd8\036\uffd8\001\002\000\040\013\102\021\056" +
    "\022\046\023\052\024\055\025\047\026\060\027\053\030" +
    "\061\031\054\032\051\033\057\034\050\035\062\036\045" +
    "\001\002\000\042\006\uffce\013\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\001\002\000" +
    "\026\002\ufff8\004\ufff8\017\ufff8\042\ufff8\051\ufff8\052\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\065\ufff8\001\002\000\042\006" +
    "\uffe6\013\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\001\002\000\026\002\uffec\004\uffec" +
    "\017\uffec\042\uffec\051\uffec\052\uffec\055\uffec\056\uffec\057" +
    "\uffec\065\uffec\001\002\000\024\012\036\022\032\037\037" +
    "\060\030\061\040\062\034\063\031\064\033\065\041\001" +
    "\002\000\040\013\110\021\056\022\046\023\052\024\055" +
    "\025\047\026\060\027\053\030\061\031\054\032\051\033" +
    "\057\034\050\035\062\036\045\001\002\000\004\016\111" +
    "\001\002\000\024\003\012\004\011\042\015\051\004\052" +
    "\006\055\014\056\013\057\005\065\016\001\002\000\024" +
    "\004\011\017\114\042\015\051\004\052\006\055\014\056" +
    "\013\057\005\065\016\001\002\000\026\002\uffff\004\uffff" +
    "\017\uffff\042\uffff\051\uffff\052\uffff\055\uffff\056\uffff\057" +
    "\uffff\065\uffff\001\002\000\030\002\ufff3\004\ufff3\017\ufff3" +
    "\042\ufff3\043\116\051\ufff3\052\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\065\ufff3\001\002\000\030\002\ufff0\004\ufff0\017\ufff0" +
    "\042\ufff0\043\131\051\ufff0\052\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\065\ufff0\001\002\000\006\016\117\042\120\001\002" +
    "\000\024\003\012\004\011\042\015\051\004\052\006\055" +
    "\014\056\013\057\005\065\016\001\002\000\004\012\121" +
    "\001\002\000\024\012\036\022\032\037\037\060\030\061" +
    "\040\062\034\063\031\064\033\065\041\001\002\000\040" +
    "\013\123\021\056\022\046\023\052\024\055\025\047\026" +
    "\060\027\053\030\061\031\054\032\051\033\057\034\050" +
    "\035\062\036\045\001\002\000\004\016\124\001\002\000" +
    "\024\003\012\004\011\042\015\051\004\052\006\055\014" +
    "\056\013\057\005\065\016\001\002\000\024\004\011\017" +
    "\126\042\015\051\004\052\006\055\014\056\013\057\005" +
    "\065\016\001\002\000\030\002\uffe7\004\uffe7\017\uffe7\042" +
    "\uffe7\043\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\065\uffe7\001\002\000\024\004\011\017\130\042\015\051" +
    "\004\052\006\055\014\056\013\057\005\065\016\001\002" +
    "\000\026\002\ufff2\004\ufff2\017\ufff2\042\ufff2\051\ufff2\052" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\065\ufff2\001\002\000\006" +
    "\016\132\042\133\001\002\000\024\003\012\004\011\042" +
    "\015\051\004\052\006\055\014\056\013\057\005\065\016" +
    "\001\002\000\004\012\134\001\002\000\024\012\036\022" +
    "\032\037\037\060\030\061\040\062\034\063\031\064\033" +
    "\065\041\001\002\000\040\013\136\021\056\022\046\023" +
    "\052\024\055\025\047\026\060\027\053\030\061\031\054" +
    "\032\051\033\057\034\050\035\062\036\045\001\002\000" +
    "\004\016\137\001\002\000\024\003\012\004\011\042\015" +
    "\051\004\052\006\055\014\056\013\057\005\065\016\001" +
    "\002\000\024\004\011\017\141\042\015\051\004\052\006" +
    "\055\014\056\013\057\005\065\016\001\002\000\030\002" +
    "\uffe8\004\uffe8\017\uffe8\042\uffe8\043\uffe8\051\uffe8\052\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\065\uffe8\001\002\000\024\004" +
    "\011\017\143\042\015\051\004\052\006\055\014\056\013" +
    "\057\005\065\016\001\002\000\026\002\ufff1\004\ufff1\017" +
    "\ufff1\042\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\065\ufff1\001\002\000\004\012\145\001\002\000\004\013" +
    "\146\001\002\000\004\016\147\001\002\000\024\003\012" +
    "\004\011\042\015\051\004\052\006\055\014\056\013\057" +
    "\005\065\016\001\002\000\024\004\011\017\151\042\015" +
    "\051\004\052\006\055\014\056\013\057\005\065\016\001" +
    "\002\000\026\002\ufff7\004\ufff7\017\ufff7\042\ufff7\051\ufff7" +
    "\052\ufff7\055\ufff7\056\ufff7\057\ufff7\065\ufff7\001\002\000" +
    "\024\012\036\022\032\037\037\060\030\061\040\062\034" +
    "\063\031\064\033\065\041\001\002\000\040\013\154\021" +
    "\056\022\046\023\052\024\055\025\047\026\060\027\053" +
    "\030\061\031\054\032\051\033\057\034\050\035\062\036" +
    "\045\001\002\000\004\006\155\001\002\000\026\002\ufff4" +
    "\004\ufff4\017\ufff4\042\ufff4\051\ufff4\052\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\065\ufff4\001\002\000\026\002\ufffd\004\ufffd" +
    "\017\ufffd\042\ufffd\051\ufffd\052\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\065\ufffd\001\002\000\010\005\166\006\170\065\167" +
    "\001\002\000\010\005\162\006\163\007\161\001\002\000" +
    "\010\005\uffe9\006\uffe9\065\uffe9\001\002\000\024\012\036" +
    "\022\032\037\037\060\030\061\040\062\034\063\031\064" +
    "\033\065\041\001\002\000\026\002\ufffc\004\ufffc\017\ufffc" +
    "\042\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\065" +
    "\ufffc\001\002\000\040\006\165\021\056\022\046\023\052" +
    "\024\055\025\047\026\060\027\053\030\061\031\054\032" +
    "\051\033\057\034\050\035\062\036\045\001\002\000\026" +
    "\002\ufffa\004\ufffa\017\ufffa\042\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\065\ufffa\001\002\000\024\012\036" +
    "\022\032\037\037\060\030\061\040\062\034\063\031\064" +
    "\033\065\041\001\002\000\012\005\uffeb\006\uffeb\007\171" +
    "\065\uffeb\001\002\000\026\002\ufffb\004\ufffb\017\ufffb\042" +
    "\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\057\ufffb\065\ufffb" +
    "\001\002\000\010\005\uffea\006\uffea\065\uffea\001\002\000" +
    "\040\006\173\021\056\022\046\023\052\024\055\025\047" +
    "\026\060\027\053\030\061\031\054\032\051\033\057\034" +
    "\050\035\062\036\045\001\002\000\026\002\ufff9\004\ufff9" +
    "\017\ufff9\042\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\065\ufff9\001\002\000\024\003\012\004\011\042\015" +
    "\051\004\052\006\055\014\056\013\057\005\065\016\001" +
    "\002\000\024\004\011\017\176\042\015\051\004\052\006" +
    "\055\014\056\013\057\005\065\016\001\002\000\004\051" +
    "\177\001\002\000\004\012\200\001\002\000\024\012\036" +
    "\022\032\037\037\060\030\061\040\062\034\063\031\064" +
    "\033\065\041\001\002\000\040\013\202\021\056\022\046" +
    "\023\052\024\055\025\047\026\060\027\053\030\061\031" +
    "\054\032\051\033\057\034\050\035\062\036\045\001\002" +
    "\000\004\006\203\001\002\000\026\002\uffee\004\uffee\017" +
    "\uffee\042\uffee\051\uffee\052\uffee\055\uffee\056\uffee\057\uffee" +
    "\065\uffee\001\002\000\004\012\205\001\002\000\004\013" +
    "\206\001\002\000\004\006\207\001\002\000\026\002\ufff5" +
    "\004\ufff5\017\ufff5\042\ufff5\051\ufff5\052\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\065\ufff5\001\002\000\024\012\036\022\032" +
    "\037\037\060\030\061\040\062\034\063\031\064\033\065" +
    "\041\001\002\000\040\013\212\021\056\022\046\023\052" +
    "\024\055\025\047\026\060\027\053\030\061\031\054\032" +
    "\051\033\057\034\050\035\062\036\045\001\002\000\004" +
    "\016\213\001\002\000\024\003\012\004\011\042\015\051" +
    "\004\052\006\055\014\056\013\057\005\065\016\001\002" +
    "\000\024\004\011\017\215\042\015\051\004\052\006\055" +
    "\014\056\013\057\005\065\016\001\002\000\026\002\uffef" +
    "\004\uffef\017\uffef\042\uffef\051\uffef\052\uffef\055\uffef\056" +
    "\uffef\057\uffef\065\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\010\002\016\003\006\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\112\001\001\000\002\001\001\000\004\007\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\100\001\001" +
    "\000\004\005\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\077\001\001\000\004\005\076\001\001\000" +
    "\004\005\075\001\001\000\004\005\074\001\001\000\004" +
    "\005\073\001\001\000\004\005\072\001\001\000\004\005" +
    "\071\001\001\000\004\005\070\001\001\000\004\005\067" +
    "\001\001\000\004\005\066\001\001\000\004\005\065\001" +
    "\001\000\004\005\064\001\001\000\004\005\063\001\001" +
    "\000\004\005\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\111\004\007\001\001" +
    "\000\004\004\112\001\001\000\002\001\001\000\004\006" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\126\004\007\001\001\000\002\001\001\000\004\005" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\124\004\007\001\001\000\004\004\112\001\001\000" +
    "\002\001\001\000\004\004\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\141\004\007\001\001\000" +
    "\002\001\001\000\004\005\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\137\004\007\001\001\000" +
    "\004\004\112\001\001\000\002\001\001\000\004\004\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\147\004\007\001\001" +
    "\000\004\004\112\001\001\000\002\001\001\000\004\005" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\174\004\007\001\001\000\004\004\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\213\004\007\001\001\000\004\004" +
    "\112\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintactico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Metodo al que se llama automaticamente ante algun error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintactico en la Linea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automaticamente ante algun error sintactico 
     * en el que ya no es posible una recuperacion de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definio dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Node NODERAIZ = new Node("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= error PTCOMA 
            {
              Production RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= TPDATO IDENTIFICADOR PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Ingreso Variable(tD:a, id:b, expr:c)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, b, null ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b); 
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= TPDATO lista_ids PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Para lista_ids -> IngresoVariable(tD:a, null, null, lista_ids);
                                                    //Ingreso Variable(tD:a, id:b, expr:c, lNombres:d)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, null,  null, d.getInstructions() ));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon(d);
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= TPDATO IDENTIFICADOR ASIGNACION expresion PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Ingreso Variable(tD:a, id:b, expr:c)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, b.toString(), (Operacion)c.getIns() ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= TPDATO lista_ids ASIGNACION expresion PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Para lista_ids -> IngresoVariable(id, null, expresion, listaids);
                                                    //Ingreso Variable(tD:a, id:b, expr:c, listaids:d)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, null, (Operacion)c.getIns(), d.getInstructions() ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(d); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IDENTIFICADOR ASIGNACION expresion PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Asignacion(id:a, expr:b)
                                                    RESULT=new Production(new Node("Instruccion"), new Asignacion(a, (Operacion)b.getIns() ));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= PRVOID IDENTIFICADOR PARIZQ PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, l.getInstructions(), false)); //false pq no es llamada
                                                    RESULT.addSon("void");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, null, true)); //true pq es llamada
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("()");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= PREJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, null, true)); //true pq es llamada
                                                    RESULT.addSon("Ejecutar");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("()");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= IMPRIMIR PARIZQ expresion PARDER PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Production(new Node("Instruccion"), new Imprimir((Operacion)a.getIns()));
                                                    RESULT.addSon("Imprimir");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Si(condicion:a, listaInstrucciones:b)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(), l.getInstructions())); 
                                                    RESULT.addSon("Si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER PRSINO LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //Si(condicion:a, listaInstrucciones:b, listaInstruccionesSino:c)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("} sino {");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon("}");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER else_ifs PRSINO LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                    //Si(condicion:a, listaInstrucciones:b, listaSinoSis:l, listaInstruccionesSino:c)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions()));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("} sino {");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon("}");
                                               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER else_ifs 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                    //Si(condicion:a, listaInstrucciones:b, listaElseIfInstrucciones:l, listaInsElse:c) 
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),null));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= PRMIENTRAS PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Production(new Node("Instruccion"), new Mientras((Operacion)a.getIns(), b.getInstructions()));
                                                    RESULT.addSon("mientras");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("}");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= PRHACER LLAVIZQ instrucciones LLAVDER PRMIENTRAS PARIZQ expresion PARDER PTCOMA 
            {
              Production RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Production(new Node("Instruccion"), new HacerMientras((Operacion)a.getIns(), b.getInstructions()));
                                                    RESULT.addSon("mientras");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("}");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= IDENTIFICADOR INCREMENTO PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Production(new Node("Instruccion"), new Operacion(a,Operacion.Tipo_operacion.INCREMENTO));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("++");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= IDENTIFICADOR DECREMENTO PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Production(new Node("Instruccion"), new Operacion(a,Operacion.Tipo_operacion.DECREMENTO));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("--");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_ids ::= lista_ids IDENTIFICADOR 
            {
              Production RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                
                                                    RESULT=new Production(new Node("lista_ids"), l.getInstructions());
                                                    RESULT.addIns(new IngresoVariable(null, a, null));
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_ids",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_ids ::= lista_ids IDENTIFICADOR COMA 
            {
              Production RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                                                
                                                    RESULT=new Production(new Node("lista_ids"), l.getInstructions());
                                                    RESULT.addIns(new IngresoVariable(null,a,null));    
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(",");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_ids",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_ids ::= IDENTIFICADOR COMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                                                                  
                                                    RESULT=new Production(new Node("lista_ids"), new LinkedList<>());
                                                    RESULT.addIns(new IngresoVariable(null,a,null));
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(",");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_ids",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else_ifs ::= else_ifs PRSINO PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                                                                  
                                                                    RESULT=new Production(new Node("SinoSis"), l.getInstructions());
                                                                    RESULT.addIns(new Si((Operacion)a.getIns(), b.getInstructions()));
                                                                    RESULT.addSon(l);
                                                                    RESULT.addSon("} sino si {");
                                                                    RESULT.addSon(a);
                                                                    RESULT.addSon(b);
                                                                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // else_ifs ::= PRSINO PRSI PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                                                                  
                                                                    RESULT=new Production(new Node("SinoSis"), new LinkedList<>());
                                                                    RESULT.addIns(new Si((Operacion)a.getIns(), b.getInstructions()));
                                                                    RESULT.addSon("} sino si {");
                                                                    RESULT.addSon(a);
                                                                    RESULT.addSon(b);
                                                                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= MENOS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion MAS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MENOS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion POR expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion DIVIDIDO expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion POTENCIA expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("^");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion MODULO expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("%");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MAYQUE expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion MENQUE expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion MAYIGUAL expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYORIGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">=");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MENIGUAL expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENORIGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<=");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion NOIGUAL expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOIGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("!=");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion IGUAL expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("==");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion OR expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("||");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion AND expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("&&");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= NOT expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon("!");
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= IDENTIFICADOR INCREMENTO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Production(new Node("Incremento"), new Operacion(a,Operacion.Tipo_operacion.INCREMENTO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= IDENTIFICADOR DECREMENTO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Production(new Node("Decremento"), new Operacion(a,Operacion.Tipo_operacion.DECREMENTO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= ENTERO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Entero"), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= DECIMAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Decimal"), new Operacion(a,Operacion.Tipo_operacion.DECIMAL));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= CADENA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Cadena"), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= CARACTER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Caracter"), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= BOOLEANO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Booleano"), new Operacion(a,Operacion.Tipo_operacion.BOOLEANO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= IDENTIFICADOR 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Identificador"), new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= PARIZQ expresion PARDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
