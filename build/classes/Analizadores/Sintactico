package Analizadores; 
import java_cup.runtime.*;
import Structures.Node;
import Structures.Arbol;
import Structures.Production;
import Structures.Instructions.Operacion;
import Structures.Instructions.Instruccion;

import Utils.Analizador;

import Structures.Instructions.IngresoVariable;
import Structures.Instructions.Asignacion;
import Structures.Instructions.Metodo;
import Structures.Instructions.Imprimir;
import Structures.Instructions.Si;
import Structures.Instructions.Mientras;
import Structures.Instructions.HacerMientras;
//import Structures.Instructions.Break;
//import Structures.Instructions.Switch;
//import Structures.Instructions.DoWhile;
import java.util.LinkedList;

parser code 
{:
    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintactico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Metodo al que se llama automaticamente ante algun error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintactico en la Linea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * MÃ©todo al que se llama automaticamente ante algun error sintactico 
     * en el que ya no es posible una recuperacion de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:}

terminal String TPDATO, ASIGNACION, PTCOMA, COMA, PUNTO, DOSPUNTOS, PARIZQ, PARDER, CORIZQ, CORDER, LLAVIZQ, LLAVDER, INTERROGACION;
terminal String MAS, MENOS, POR, DIVIDIDO, POTENCIA, MODULO, MENQUE, MAYQUE, MAYIGUAL, MENIGUAL, IGUAL, NOIGUAL, OR, AND, NOT;
terminal String INCREMENTO, DECREMENTO, PRSI, PRSINO, PRSELECTOR, PRCASO, PRPORDEFECTO, PRCORTAR;
terminal String PRPARA, PRMIENTRAS, PRHACER, PRCONTINUAR, PRRETORNO, PRVOID, IMPRIMIR, PREJECUTAR;
terminal String CADENA, CARACTER, ENTERO, DECIMAL, BOOLEANO, IDENTIFICADOR;
terminal String UMENOS;

non terminal ini;
non terminal Production instrucciones;
non terminal Production instruccion;
non terminal Production expresion;
non terminal Production else_ifs;
non terminal Production lista_ids;
non terminal Production tipo_dato;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence left MAYIGUAL,MENIGUAL, MAYQUE, MENQUE, IGUAL, NOIGUAL;
precedence left MAS,MENOS,INCREMENTO, DECREMENTO;
precedence left POR,DIVIDIDO,MODULO;
precedence left POTENCIA;
precedence right UMENOS;

start with ini; 

ini::= instrucciones:a    
                                                {:
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definio dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Node NODERAIZ = new Node("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                :}
;

instrucciones ::= 
   instrucciones:a instruccion:b                {:
                                                    RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                :}
 | instruccion:a                                {:
                                                    RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                :}
 | error PTCOMA
; 

instruccion ::= 
  TPDATO:a IDENTIFICADOR:b PTCOMA            {:
                                                    //Ingreso Variable(tD:a, id:b, expr:c)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, b, null ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b); 
                                                    RESULT.addSon(";");
                                                :}
| TPDATO:a lista_ids:d PTCOMA                {:
                                                    //Para lista_ids -> IngresoVariable(tD:a, null, null, lista_ids);
                                                    //Ingreso Variable(tD:a, id:b, expr:c, lNombres:d)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, null,  null, d.getInstructions() ));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon(d);
                                                    RESULT.addSon(";");
                                                :}
| TPDATO:a IDENTIFICADOR:b ASIGNACION expresion:c PTCOMA    
                                                {:
                                                    //Ingreso Variable(tD:a, id:b, expr:c)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, b.toString(), (Operacion)c.getIns() ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon(";");
                                                :}
| TPDATO:a lista_ids:d ASIGNACION expresion:c PTCOMA
                                                {:
                                                    //Para lista_ids -> IngresoVariable(id, null, expresion, listaids);
                                                    //Ingreso Variable(tD:a, id:b, expr:c, listaids:d)
                                                    RESULT=new Production(new Node("Instruccion"), new IngresoVariable(a, null, (Operacion)c.getIns(), d.getInstructions() ));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(d); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon(";");
                                                :}
| IDENTIFICADOR:a ASIGNACION expresion:b PTCOMA {:
                                                    //Asignacion(id:a, expr:b)
                                                    RESULT=new Production(new Node("Instruccion"), new Asignacion(a, (Operacion)b.getIns() ));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(";");
                                                :}
 | PRVOID IDENTIFICADOR:a PARIZQ PARDER LLAVIZQ instrucciones:l LLAVDER  
                                                {:
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, l.getInstructions(), false)); //false pq no es llamada
                                                    RESULT.addSon("void");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                                :}
 | IDENTIFICADOR:a PARIZQ PARDER PTCOMA         {:
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, null, true)); //true pq es llamada
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("()");
                                                    RESULT.addSon(";");
                                                :}
 | PREJECUTAR IDENTIFICADOR:a PARIZQ PARDER PTCOMA         
                                                {:
                                                    //Metodo(id:a, listaInstrucciones:l, esLlamada:esLlamada)
                                                    RESULT=new Production(new Node("Instruccion"), new Metodo(a, null, true)); //true pq es llamada
                                                    RESULT.addSon("Ejecutar");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("()");
                                                    RESULT.addSon(";");
                                                :}
| IMPRIMIR PARIZQ expresion:a PARDER PTCOMA     {:
                                                    RESULT=new Production(new Node("Instruccion"), new Imprimir((Operacion)a.getIns()));
                                                    RESULT.addSon("Imprimir");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(";");
                                                :}
 | PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:l LLAVDER       
                                                {:
                                                    //Si(condicion:a, listaInstrucciones:b)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(), l.getInstructions())); 
                                                    RESULT.addSon("Si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                                :} 
| PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER PRSINO LLAVIZQ instrucciones:c LLAVDER 
                                                {:
                                                    //Si(condicion:a, listaInstrucciones:b, listaInstruccionesSino:c)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("} sino {");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon("}");
                                                :}
 | PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER else_ifs:l PRSINO LLAVIZQ instrucciones:c LLAVDER    
                                                {:  
                                                    //Si(condicion:a, listaInstrucciones:b, listaSinoSis:l, listaInstruccionesSino:c)
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions()));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("} sino {");
                                                    RESULT.addSon(c);
                                                    RESULT.addSon("}");
                                               :}
 | PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER else_ifs:l    
                                                {:  
                                                    //Si(condicion:a, listaInstrucciones:b, listaElseIfInstrucciones:l, listaInsElse:c) 
                                                    RESULT=new Production(new Node("Instruccion"), new Si((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),null));
                                                    RESULT.addSon("si");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon(l);
                                                    RESULT.addSon("}");
                                               :}
| PRMIENTRAS PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER	
                                                {:
                                                    RESULT=new Production(new Node("Instruccion"), new Mientras((Operacion)a.getIns(), b.getInstructions()));
                                                    RESULT.addSon("mientras");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("}");
                                                :}
| PRHACER LLAVIZQ instrucciones:b LLAVDER PRMIENTRAS PARIZQ expresion:a PARDER PTCOMA
                                                {:
                                                    RESULT=new Production(new Node("Instruccion"), new HacerMientras((Operacion)a.getIns(), b.getInstructions()));
                                                    RESULT.addSon("mientras");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("{");
                                                    RESULT.addSon(b);
                                                    RESULT.addSon("}");
                                                :}
| IDENTIFICADOR:a INCREMENTO PTCOMA             {:
                                                    RESULT=new Production(new Node("Instruccion"), new Operacion(a,Operacion.Tipo_operacion.INCREMENTO));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("++");
                                                    RESULT.addSon(";");
                                                :}
| IDENTIFICADOR:a DECREMENTO PTCOMA             {:
                                                    RESULT=new Production(new Node("Instruccion"), new Operacion(a,Operacion.Tipo_operacion.DECREMENTO));
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("--");
                                                    RESULT.addSon(";");
                                                :}
;

lista_ids ::=
    lista_ids:l IDENTIFICADOR:a  	        {:                                                                                
                                                    RESULT=new Production(new Node("lista_ids"), l.getInstructions());
                                                    RESULT.addIns(new IngresoVariable(null, a, null));
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon(a);
                                                :}
    | lista_ids:l IDENTIFICADOR:a COMA 	        {:                                                                                
                                                    RESULT=new Production(new Node("lista_ids"), l.getInstructions());
                                                    RESULT.addIns(new IngresoVariable(null,a,null));    
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(l);
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(",");
                                                :}
    | IDENTIFICADOR:a COMA	                {:                                                                                                  
                                                    RESULT=new Production(new Node("lista_ids"), new LinkedList<>());
                                                    RESULT.addIns(new IngresoVariable(null,a,null));
                                                    RESULT.addSon("lista_ids");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(",");
                                                :}
;

else_ifs ::= 
    else_ifs:l PRSINO PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER         
                                                                 {:                                                                                                  
                                                                    RESULT=new Production(new Node("SinoSis"), l.getInstructions());
                                                                    RESULT.addIns(new Si((Operacion)a.getIns(), b.getInstructions()));
                                                                    RESULT.addSon(l);
                                                                    RESULT.addSon("} sino si {");
                                                                    RESULT.addSon(a);
                                                                    RESULT.addSon(b);
                                                                 :}
  | PRSINO PRSI PARIZQ expresion:a PARDER LLAVIZQ instrucciones:b LLAVDER                           
                                                                 {:                                                                                                  
                                                                    RESULT=new Production(new Node("SinoSis"), new LinkedList<>());
                                                                    RESULT.addIns(new Si((Operacion)a.getIns(), b.getInstructions()));
                                                                    RESULT.addSon("} sino si {");
                                                                    RESULT.addSon(a);
                                                                    RESULT.addSon(b);
                                                                 :}
;

expresion  ::= 
    MENOS expresion:a                           {:
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                :}%prec UMENOS
 |  expresion:a MAS        expresion:b          {:
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                :}
 |  expresion:a MENOS      expresion:b          {:
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                :}
 |  expresion:a POR        expresion:b          {:
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                :}
 |  expresion:a DIVIDIDO   expresion:b          {:                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                :}
 |  expresion:a POTENCIA   expresion:b          {:                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("^");
                                                    RESULT.addSon(b);
                                                :}
 |  expresion:a MODULO   expresion:b            {:                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("%");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  MAYQUE   expresion:b            {:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">");
                                                    RESULT.addSon(b);
                                                :} 
 | expresion:a  MENQUE   expresion:b            {:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<");
                                                    RESULT.addSon(b);
                                                :}  
 | expresion:a  MAYIGUAL   expresion:b            {:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYORIGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">=");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  MENIGUAL   expresion:b            {:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENORIGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<=");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  NOIGUAL   expresion:b            {:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOIGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("!=");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  IGUAL   expresion:b            	{:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("==");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  OR   expresion:b            	{:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("||");
                                                    RESULT.addSon(b);
                                                :}
 | expresion:a  AND   expresion:b            	{:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("&&");
                                                    RESULT.addSon(b);
                                                :}
 | NOT   expresion:a 				{:
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon("!");
                                                    RESULT.addSon(a);
                                                :}
 |  IDENTIFICADOR:a INCREMENTO                      {:
                                                    RESULT=new Production(new Node("Incremento"), new Operacion(a,Operacion.Tipo_operacion.INCREMENTO));
                                                :}
 |  IDENTIFICADOR:a DECREMENTO                      {:
                                                    RESULT=new Production(new Node("Decremento"), new Operacion(a,Operacion.Tipo_operacion.DECREMENTO));
                                                :}
 |  ENTERO:a                                    {:
                                                    RESULT=new Production(new Node("Entero"), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                :}
 |  DECIMAL:a                                   {:
                                                    RESULT=new Production(new Node("Decimal"), new Operacion(a,Operacion.Tipo_operacion.DECIMAL));
                                                :}
 |  CADENA:a                                    {:
                                                    RESULT=new Production(new Node("Cadena"), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                :}
 |  CARACTER:a                                  {:
                                                    RESULT=new Production(new Node("Caracter"), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                :}
 |  BOOLEANO:a                                  {:
                                                    RESULT=new Production(new Node("Booleano"), new Operacion(a,Operacion.Tipo_operacion.BOOLEANO));
                                                :}
 |  IDENTIFICADOR:a                                  {:
                                                    RESULT=new Production(new Node("Identificador"), new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                :}
 |  PARIZQ expresion:a PARDER                   {:
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                :}
;